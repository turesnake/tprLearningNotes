#region 程序集 UnityEngine.AudioModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// UnityEngine.AudioModule.dll
#endregion

using System;
using System.ComponentModel;
using UnityEngine.Audio;
using UnityEngine.Internal;

namespace UnityEngine
{

    //
    // 摘要:
    //     A representation of audio sources in 3D.
    [RequireComponent(typeof(Transform))]
    [StaticAccessorAttribute("AudioSourceBindings", Bindings.StaticAccessorType.DoubleColon)]
    public sealed class AudioSource : AudioBehaviour
    {
        public AudioSource();

        /*
        // 摘要:
        //     Pan has been deprecated. Use panStereo instead.
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Obsolete("AudioSource.pan has been deprecated. Use AudioSource.panStereo instead (UnityUpgradable) -> panStereo", true)]
        public float pan { get; set; }
        */

        //
        // 摘要:
        //     Playback position in seconds.
        [NativePropertyAttribute("SecPosition")]
        public float time { get; set; }

        //
        // 摘要:
        //     Playback position in PCM samples.
        [NativePropertyAttribute("SamplePosition")]
        public int timeSamples { get; set; }
        //
        // 摘要:
        //     The default AudioClip to play.
        [NativePropertyAttribute("AudioClip")]
        public AudioClip clip { get; set; }
        //
        // 摘要:
        //     The target group to which the AudioSource should route its signal.
        public AudioMixerGroup outputAudioMixerGroup { get; set; }
        //
        // 摘要:
        //     Gets or sets the gamepad audio output type for this audio source.
        [NativeConditionalAttribute("PLATFORM_SUPPORTS_GAMEPAD_AUDIO")]
        public GamepadSpeakerOutputType gamepadSpeakerOutputType { get; set; }
        //
        // 摘要:
        //     Is the clip playing right now (Read Only)?
        public bool isPlaying { get; }
        //
        // 摘要:
        //     True if all sounds played by the AudioSource (main sound started by Play() or
        //     playOnAwake as well as one-shots) are culled by the audio system.
        public bool isVirtual { get; }
        //
        // 摘要:
        //     Is the audio clip looping?
        public bool loop { get; set; }

        //
        // 摘要:
        //     This makes the audio source not take into account the volume of the audio listener.
        public bool ignoreListenerVolume { get; set; }
        //
        // 摘要:
        //     If set to true, the audio source will automatically start playing on awake.
        public bool playOnAwake { get; set; }
        //
        // 摘要:
        //     Allows AudioSource to play even though AudioListener.pause is set to true. This
        //     is useful for the menu element sounds or background music in pause menus.
        public bool ignoreListenerPause { get; set; }
        //
        // 摘要:
        //     Whether the Audio Source should be updated in the fixed or dynamic update.
        public AudioVelocityUpdateMode velocityUpdateMode { get; set; }
        //
        // 摘要:
        //     Pans a playing sound in a stereo way (left or right). This only applies to sounds
        //     that are Mono or Stereo.
        [NativePropertyAttribute("StereoPan")]
        public float panStereo { get; set; }
        //
        // 摘要:
        //     Sets how much this AudioSource is affected by 3D spatialisation calculations
        //     (attenuation, doppler etc). 0.0 makes the sound full 2D, 1.0 makes it full 3D.
        [NativePropertyAttribute("SpatialBlendMix")]
        public float spatialBlend { get; set; }
        //
        // 摘要:
        //     Enables or disables spatialization.
        public bool spatialize { get; set; }
        //
        // 摘要:
        //     Determines if the spatializer effect is inserted before or after the effect filters.
        public bool spatializePostEffects { get; set; }
        //
        // 摘要:
        //     The amount by which the signal from the AudioSource will be mixed into the global
        //     reverb associated with the Reverb Zones.
        public float reverbZoneMix { get; set; }
        //
        // 摘要:
        //     Bypass effects (Applied from filter components or global listener filters).
        public bool bypassEffects { get; set; }
        //
        // 摘要:
        //     When set global effects on the AudioListener will not be applied to the audio
        //     signal generated by the AudioSource. Does not apply if the AudioSource is playing
        //     into a mixer group.
        public bool bypassListenerEffects { get; set; }
        //
        // 摘要:
        //     When set doesn't route the signal from an AudioSource into the global reverb
        //     associated with reverb zones.
        public bool bypassReverbZones { get; set; }
        //
        // 摘要:
        //     Sets the Doppler scale for this AudioSource.
        public float dopplerLevel { get; set; }
        //
        // 摘要:
        //     Sets the spread angle (in degrees) of a 3d stereo or multichannel sound in speaker
        //     space.
        public float spread { get; set; }
        //
        // 摘要:
        //     Sets the priority of the AudioSource.
        public int priority { get; set; }

       
        //  Un- / Mutes the AudioSource. Mute sets the volume=0, Un-Mute restore the original volume.
        //  mute: 沉默
        public bool mute { get; set; }

        
        //     Within the Min distance the AudioSource will cease to grow louder in volume.
        //  在最小距离内，音频源的音量将停止增大。
        public float minDistance { get; set; }

        
        //     (Logarithmic rolloff) MaxDistance is the distance a sound stops attenuating at.
        //  对数衰减）MaxDistance是声音停止衰减的距离。
        public float maxDistance { get; set; }

        
        //     Sets/Gets how the AudioSource attenuates over distance.
        //  设置/获取 音频源 如何随距离衰减。
        public AudioRolloffMode rolloffMode { get; set; }

        /*
        [Obsolete("minVolume is not supported anymore. Use min-, maxDistance and rolloffMode instead.", true)]
        public float minVolume { get; set; }
        */

        
        //     The pitch of the audio source.  音频源的音调。
        public float pitch { get; set; }

        
        //     The volume of the audio source (0.0 to 1.0).
        public float volume { get; set; }

        /*
        [Obsolete("rolloffFactor is not supported anymore. Use min-, maxDistance and rolloffMode instead.", true)]
        public float rolloffFactor { get; set; }
        //
        // 摘要:
        //     PanLevel has been deprecated. Use spatialBlend instead.
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Obsolete("AudioSource.panLevel has been deprecated. Use AudioSource.spatialBlend instead (UnityUpgradable) -> spatialBlend", true)]
        public float panLevel { get; set; }
        [Obsolete("maxVolume is not supported anymore. Use min-, maxDistance and rolloffMode instead.", true)]
        public float maxVolume { get; set; }
        */


        //
        // 摘要:
        //     Check if the platform supports an audio output type on gamepads.
        //
        // 参数:
        //   outputType:
        //     The desired output type.
        //
        // 返回结果:
        //     Returns true if the gamepad supports the specified audio output type.
        [NativeConditionalAttribute("PLATFORM_SUPPORTS_GAMEPAD_AUDIO")]
        [NativeMethodAttribute(Name = "GamepadSpeakerSupportsOutputType", HasExplicitThis = false)]
        public static bool GamepadSpeakerSupportsOutputType(GamepadSpeakerOutputType outputType);

        //
        // 摘要:
        //     Plays an AudioClip at a given position in world space.
        //
        // 参数:
        //   clip:
        //     Audio data to play.
        //
        //   position:
        //     Position in world space from which sound originates.
        //
        //   volume:
        //     Playback volume.
        [ExcludeFromDocs]
        public static void PlayClipAtPoint(AudioClip clip, Vector3 position);
        public static void PlayClipAtPoint(AudioClip clip, Vector3 position, [Internal.DefaultValue("1.0F")] float volume);


        //
        // 摘要:
        //     Disables audio output to a gamepad for this audio source.
        //
        // 返回结果:
        //     Returns true if successful.
        [NativeConditionalAttribute("PLATFORM_SUPPORTS_GAMEPAD_AUDIO")]
        [NativeMethodAttribute(Name = "AudioSourceBindings::DisableGamepadOutput", HasExplicitThis = true)]
        public bool DisableGamepadOutput();

        // 获得 环绕声 解码 float
        public bool GetAmbisonicDecoderFloat(int index, out float value);

        //
        // 摘要:
        //     Get the current custom curve for the given AudioSourceCurveType.
        //
        // 参数:
        //   type:
        //     The curve type to get.
        //
        // 返回结果:
        //     The custom AnimationCurve corresponding to the given curve type.
        public AnimationCurve GetCustomCurve(AudioSourceCurveType type);


        /*
        // 摘要:
        //     Deprecated Version. Returns a block of the currently playing source's output
        //     data.
        //
        // 参数:
        //   numSamples:
        //
        //   channel:
        [Obsolete("GetOutputData returning a float[] is deprecated, use GetOutputData and pass a pre allocated array instead.")]
        public float[] GetOutputData(int numSamples, int channel);
        */

        //
        // 摘要:
        //     Provides a block of the currently playing source's output data.
        //
        // 参数:
        //   samples:
        //     The array to populate with audio samples. Its length must be a power of 2.
        //
        //   channel:
        //     The channel to sample from.
        public void GetOutputData(float[] samples, int channel);
        public bool GetSpatializerFloat(int index, out float value);

        /*
        // 摘要:
        //     Deprecated Version. Returns a block of the currently playing source's spectrum
        //     data.
        //
        // 参数:
        //   numSamples:
        //     The number of samples to retrieve. Must be a power of 2.
        //
        //   channel:
        //     The channel to sample from.
        //
        //   window:
        //     The FFTWindow type to use when sampling.
        [Obsolete("GetSpectrumData returning a float[] is deprecated, use GetSpectrumData and pass a pre allocated array instead.")]
        public float[] GetSpectrumData(int numSamples, int channel, FFTWindow window);
        */


        //
        // 摘要:
        //     Provides a block of the currently playing audio source's spectrum data.
        //
        // 参数:
        //   samples:
        //     The array to populate with audio samples. Its length must be a power of 2.
        //
        //   channel:
        //     The channel to sample from.
        //
        //   window:
        //     The FFTWindow type to use when sampling.
        public void GetSpectrumData(float[] samples, int channel, FFTWindow window);



        //
        // 摘要:
        //     Pauses playing the clip.
        public void Pause();

        [ExcludeFromDocs]
        public void Play();
        //
        // 摘要:
        //     Plays the clip.
        //
        // 参数:
        //   delay:
        //     Deprecated. Delay in number of samples, assuming a 44100Hz sample rate (meaning
        //     that Play(44100) will delay the playing by exactly 1 sec).
        public void Play([Internal.DefaultValue("0")] ulong delay);

        //
        // 摘要:
        //     Plays the clip with a delay(延迟) specified in seconds. Users are advised to use this
        //     function instead of the old Play(delay) function that took a delay specified
        //     in samples relative to a reference rate of 44.1 kHz as an argument.
        //
        // 参数:
        //   delay:
        //     Delay time specified in seconds.
        public void PlayDelayed(float delay);

        //
        // 摘要:
        //     Plays an AudioClip, and scales the AudioSource volume by volumeScale.
        //
        // 参数:
        //   clip:
        //     The clip being played.
        //
        //   volumeScale:
        //     The scale of the volume (0-1).
        [ExcludeFromDocs]
        public void PlayOneShot(AudioClip clip);
        //
        // 摘要:
        //     Plays an AudioClip, and scales the AudioSource volume by volumeScale.
        //
        // 参数:
        //   clip:
        //     The clip being played.
        //
        //   volumeScale:
        //     The scale of the volume (0-1).
        public void PlayOneShot(AudioClip clip, [Internal.DefaultValue("1.0F")] float volumeScale);

        //
        // 摘要:
        //     Enable playing of audio source though a specfic gamepad.
        //
        // 参数:
        //   slot:
        //     Slot number of the gamepad (0-3).
        //
        // 返回结果:
        //     Returns TRUE if enabling audio output through this users controller was successful.
        [NativeConditionalAttribute("PLATFORM_SUPPORTS_GAMEPAD_AUDIO")]
        [NativeMethodAttribute(Name = "AudioSourceBindings::PlayOnGamepad", HasExplicitThis = true, ThrowsException = true)]
        public bool PlayOnGamepad(int slot);

        //
        // 摘要:
        //     Plays the clip at a specific time on the absolute time-line that AudioSettings.dspTime
        //     reads from.
        //
        // 参数:
        //   time:
        //     Time in seconds on the absolute time-line that AudioSettings.dspTime refers to
        //     for when the sound should start playing.
        public void PlayScheduled(double time);

        //
        // 摘要:
        //     Sets a user-defined parameter of a custom ambisonic decoder effect that is attached
        //     to an AudioSource.
        //     环绕声 解码
        // 参数:
        //   index:
        //     Zero-based index of user-defined parameter to be set.
        //
        //   value:
        //     New value of the user-defined parameter.
        //
        // 返回结果:
        //     True, if the parameter could be set.
        public bool SetAmbisonicDecoderFloat(int index, float value);

        //
        // 摘要:
        //     Set the custom curve for the given AudioSourceCurveType.
        //
        // 参数:
        //   type:
        //     The curve type that should be set.
        //
        //   curve:
        //     The curve that should be applied to the given curve type.
        public void SetCustomCurve(AudioSourceCurveType type, AnimationCurve curve);

        [NativeConditionalAttribute("PLATFORM_SUPPORTS_GAMEPAD_AUDIO")]
        [NativeMethodAttribute(Name = "AudioSourceBindings::SetGamepadSpeakerMixLevel", HasExplicitThis = true, ThrowsException = true)]
        public bool SetGamepadSpeakerMixLevel(int slot, int mixLevel);

        [NativeConditionalAttribute("PLATFORM_SUPPORTS_GAMEPAD_AUDIO")]
        [NativeMethodAttribute(Name = "AudioSourceBindings::SetGamepadSpeakerMixLevelDefault", HasExplicitThis = true, ThrowsException = true)]
        public bool SetGamepadSpeakerMixLevelDefault(int slot);

        [NativeConditionalAttribute("PLATFORM_SUPPORTS_GAMEPAD_AUDIO")]
        [NativeMethodAttribute(Name = "AudioSourceBindings::SetGamepadSpeakerRestrictedAudio", HasExplicitThis = true, ThrowsException = true)]
        public bool SetGamepadSpeakerRestrictedAudio(int slot, bool restricted);

        //
        // 摘要:
        //     Changes the time at which a sound that has already been scheduled to play will
        //     end. Notice that depending on the timing not all rescheduling requests can be
        //     fulfilled.
        //
        // 参数:
        //   time:
        //     Time in seconds.
        public void SetScheduledEndTime(double time);
        //
        // 摘要:
        //     Changes the time at which a sound that has already been scheduled to play will
        //     start.
        //
        // 参数:
        //   time:
        //     Time in seconds.
        public void SetScheduledStartTime(double time);
        //
        // 摘要:
        //     Sets a user-defined parameter of a custom spatializer effect that is attached
        //     to an AudioSource.
        //
        // 参数:
        //   index:
        //     Zero-based index of user-defined parameter to be set.
        //
        //   value:
        //     New value of the user-defined parameter.
        //
        // 返回结果:
        //     True, if the parameter could be set.
        public bool SetSpatializerFloat(int index, float value);
        //
        // 摘要:
        //     Stops playing the clip.
        public void Stop();
        //
        // 摘要:
        //     Unpause the paused playback of this AudioSource.
        public void UnPause();
    }
}

