#region 程序集 UnityEngine.PhysicsModule, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// UnityEngine.PhysicsModule.dll
#endregion


namespace UnityEngine
{
    /*
        A CharacterController allows you to easily do movement constrained by collisions
        without having to deal with a rigidbody.


        A CharacterController is not affected by forces and will only move when you call the Move() function. 
        It will then carry out the movement but be constrained by collisions.
        --
        本类 会处理到移动指令, 但是它也会受到 collision 的限制;


        
    */
    [NativeHeaderAttribute("Modules/Physics/CharacterController.h")]
    public class CharacterController : Collider
    {
        public CharacterController();

        
        //     The current relative velocity of the Character (see notes).
        public Vector3 velocity { get; }

        //
        // 摘要:
        //     Was the CharacterController touching the ground during the last move?
        public bool isGrounded { get; }
        

        //  What part of the capsule collided with the environment during the last CharacterController.Move() call.
        //  若在上一次调用 Move() 时, 同时碰到了多个方向的 物体, 那么这些方向都会被标注出来;
        public CollisionFlags collisionFlags { get; }

        //
        // 摘要:
        //     The radius of the character's capsule.
        public float radius { get; set; }
        //
        // 摘要:
        //     The height of the character's capsule.
        public float height { get; set; }


        /*
            The center of the character's capsule relative to the transform's position.
            ---
            暂未明白, 如果直接为一个 capsule 绑定一个 本类组件, 它的 center 为 {0,0,0};
        */
        public Vector3 center { get; set; }

        //
        // 摘要:
        //     The character controllers slope limit in degrees.
        public float slopeLimit { get; set; }
        //
        // 摘要:
        //     The character controllers step offset in meters.
        public float stepOffset { get; set; }

        /*
            也是 组件面板上暴露的那个值:

            The character's collision skin width.
            Specifies a skin around the character within which contacts will be generated by the physics engine. 
            Use it to avoid numerical precision issues.
            This is dependant on the scale of the world, but should be a small, positive non zero value.

            -- manual 上的解释: --
            Two colliders can penetrate each other as deep as their Skin Width. Larger Skin Widths reduce jitter. 
            Low Skin Width can cause the character to get stuck. A good setting is to make this value 10% of the Radius.

            角色沿着自己的 胶囊碰撞体 向外厚出去的一个距离; 实际上会增厚 碰撞体;
        */
        public float skinWidth { get; set; }

        //
        // 摘要:
        //     Gets or sets the minimum move distance of the character controller.
        public float minMoveDistance { get; set; }
        //
        // 摘要:
        //     Determines whether other rigidbodies or character controllers collide with this
        //     character controller (by default this is always enabled).
        public bool detectCollisions { get; set; }
        //
        // 摘要:
        //     Enables or disables overlap recovery. Enables or disables overlap recovery. Used
        //     to depenetrate character controllers from static objects when an overlap is detected.
        public bool enableOverlapRecovery { get; set; }


        /*
            Supplies the movement of a GameObject with an attached CharacterController component.
            
            参数:
                motion:
        */
        public CollisionFlags Move(Vector3 motion);

        //
        // 摘要:
        //     Moves the character with speed.
        //
        // 参数:
        //   speed:
        public bool SimpleMove(Vector3 speed);
    }
}

